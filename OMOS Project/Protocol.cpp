//=======================================================================================
//= Fixes.cpp
//=======================================================================================
#include "StdAfx.h"

//------------------------------------------------------
//- Start
//------------------------------------------------------
bool ProtocolCore (BYTE protoNum,LPBYTE aRecv,int aLen,int aIndex,DWORD Encrypt,DWORD Serial)
{
	//--------------------------------------------------------------------------------
	Player.SetIndex(aIndex);
	//--------------------------------------------------------------------------------
	OBJECTSTRUCT *gObj = (OBJECTSTRUCT*)OBJECT_POINTER(aIndex);
	OBJECTSTRUCT *ObjTable = (OBJECTSTRUCT*)OBJECT_BASE;
	//--------------------------------------------------------------------------------

	switch(BYTE(protoNum))
	{
	case 0x00:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		if(COMMAND_NAME("/post"))
		{
			//--------------------------------------------------------------------------------
			if(ReadINI.GetInt("Commands","PostCommandActive",INI_COMMANDS) == 0)
			{
				//--------------------------------------------------------------------------------
				Player.SendTextMsg(1,"This command is disabled!");
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.GetLevel() < ReadINI.GetInt("Commands","PostCommandMinLevel",INI_COMMANDS))
			{
				//--------------------------------------------------------------------------------
				Player.SendTextMsg(1,"You Don't have req level for usage. Min level %d",ReadINI.GetInt("Commands","PostCommandMinLevel",INI_COMMANDS));
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.GetMoney() > ReadINI.GetInt("Commands","PostCommandPrice",INI_COMMANDS))
			{
				//--------------------------------------------------------------------------------
				Player.RemoveMoney(ReadINI.GetInt("Commands","PostCommandPrice",INI_COMMANDS));
				//--------------------------------------------------------------------------------
			}
			else
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			Player.SendAllTextMsg(1,"[Post] %s: %s",gObj->Name,(char*)aRecv+13+strlen("/post"));
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		else if(COMMAND_NAME("/drop"))
		{
			//--------------------------------------------------------------------------------
			char * Cmd = (char*)aRecv+13+strlen("/drop");
			//--------------------------------------------------------------------------------
			int ItemType,ItemNr,ItemLevel,ItemSkill,ItemLuck,ItemOpt,ItemExc,ItemAncient;
			//--------------------------------------------------------------------------------
			if(Player.IsGameMaster() == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.CanUseCommand("/drop") == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			sscanf_s(Cmd,"%d %d %d %d %d %d %d %d",&ItemType,&ItemNr,&ItemLevel,&ItemSkill,&ItemLuck,&ItemOpt,&ItemExc,&ItemAncient);
			//--------------------------------------------------------------------------------
			DWORD Item = ItemType * 512 + ItemNr;
			//--------------------------------------------------------------------------------
			ItemSerialCreateSend(aIndex,gObj->MapNumber,gObj->X,gObj->Y,Item,ItemLevel,0,ItemSkill,ItemLuck,ItemOpt,aIndex,ItemExc,ItemAncient);
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		else if(COMMAND_NAME("/reload"))
		{
			//--------------------------------------------------------------------------------
			if(Player.IsGameMaster() == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.CanUseCommand("/reload") == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			Config.EditMemory();
			LoadIPBlock();
			ShopDataLoad();
			//--------------------------------------------------------------------------------
			Player.SendTextMsg(1,"[Reload] Server Configuration Reloaded!");
			Player.SendTextMsg(1,"[Reload] Blocked IP Configuration Reloaded!");
			Player.SendTextMsg(1,"[Reload] Shop Configuration Reloaded!");
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		else if(COMMAND_NAME("/gg"))
		{
			//--------------------------------------------------------------------------------
			if(Player.IsGameMaster() == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.CanUseCommand("/gg") == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			Player.SendAllTextMsg(0,"[%s] %s",gObj->Name,(char*)aRecv+13+strlen("/gg"));
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		else if(COMMAND_NAME("/omos"))
		{
			Player.SendTextMsg(1,"This server is powered by OMOS Project!");
			Player.SendTextMsg(1,"http://tinyurl/omon11/");
			Player.SendTextMsg(1,"OMOS Project is developed by System32");
			Player.SendTextMsg(1,"MSN/Email: syNtem.32@hotmail.com");
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		else if(COMMAND_NAME("/gmove"))
		{
			char * Cmd = (char*)aRecv+13+strlen("/gg");
			int Map,X,Y;
			//--------------------------------------------------------------------------------
			if(Player.IsGameMaster() == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.CanUseCommand("/gmove") == false)
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			sscanf(Cmd,"%d %d %d",&Map, &X,&Y);
			//--------------------------------------------------------------------------------
			Player.Teleport(Map,X,Y);
			//--------------------------------------------------------------------------------
			Console.Write("[GMove][Nick:%s] Player moved Map:%d, X:%, Y:%d",gObj->Name,Map,X,Y);
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	case 0x03:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		Player.SendTextMsg(0,ConnectMessage,gObj->Name);
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	case 0x30:
		{
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		OBJECTSTRUCT *ObjNPC = (OBJECTSTRUCT*) OBJECT_POINTER ((int)PGetNPC_ID);
		//--------------------------------------------------------------------------------
		if(ObjNPC->Class == ReadINI.GetInt("TeleportNPC","TeleportNPC_ID",INI_NPC) && ObjNPC->MapNumber == ReadINI.GetInt("TeleportNPC","TeleportNPC_MAP",INI_NPC) && ObjNPC->X == ReadINI.GetInt("TeleportNPC","TeleportNPC_X",INI_NPC) && ObjNPC->Y == ReadINI.GetInt("TeleportNPC","TeleportNPC_Y",INI_NPC))
		{
			//--------------------------------------------------------------------------------
			if(ReadINI.GetInt("TeleportNPC","TeleportNPC_GM",INI_NPC) == 1)
			{
				if(Player.IsGameMaster() == false)
				{
					//--------------------------------------------------------------------------------
					return false;
					//--------------------------------------------------------------------------------
				}
			}
			//--------------------------------------------------------------------------------
			if(ReadINI.GetInt("TeleportNPC","TeleportNPC_Active",INI_NPC) == 0)
			{
				//--------------------------------------------------------------------------------
				Player.SendTextMsg(1,"Teleport is disabled!");
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.GetLevel() < ReadINI.GetInt("TeleportNPC","TeleportNPC_MinLevel",INI_NPC))
			{
				//--------------------------------------------------------------------------------
				Player.SendTextMsg(1,"You Don't have req level for usage. Min level %d",ReadINI.GetInt("TeleportNPC","TeleportNPC_MinLevel",INI_NPC));
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			if(Player.GetMoney() > ReadINI.GetInt("TeleportNPC","TeleportNPC_Price",INI_NPC))
			{
				//--------------------------------------------------------------------------------
				Player.RemoveMoney(ReadINI.GetInt("TeleportNPC","TeleportNPC_Price",INI_NPC));
				//--------------------------------------------------------------------------------
			}
			else
			{
				//--------------------------------------------------------------------------------
				return false;
				//--------------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------------
			Player.Teleport(ReadINI.GetInt("TeleportNPC","TeleportTo_MAP",INI_NPC),ReadINI.GetInt("TeleportNPC","TeleportTo_X",INI_NPC),ReadINI.GetInt("TeleportNPC","TeleportTo_Y",INI_NPC));
			//--------------------------------------------------------------------------------
			Console.Write("[TeleportNPC][Nick: %s] Player has been teleported!",gObj->Name);
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
		}
	case 0xBC:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		if(ObjTable[aIndex].m_IfState.use > 0 && ObjTable[aIndex].m_IfState.type != 12)
		{
			//--------------------------------------------------------------------------------
			return true;
			//--------------------------------------------------------------------------------
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	case 0x95:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		//GoldenArcher
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	case 0x26:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		//CGUseItemRecv((PMSG_USEITEM*)aRecv,aIndex);
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	case 0x17:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		//CRateSystem.Work(aIndex,gObj->MapNumber);
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	case 0xF1:
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		if(aRecv[3] == 0x01)
		{
			//--------------------------------------------------------------------------------
			char IPAddr[16];
			Player.GetIP(IPAddr);
			//--------------------------------------------------------------------------------
			for(int x=1;x < IPBlockCount;x++)
			{
				//--------------------------------------------------------------------------------
				if(!strcmp(IPBlockInfo[x].IP,IPAddr))
				{
					//--------------------------------------------------------------------------------
					Player.Disconnect();
					//--------------------------------------------------------------------------------
					return false;
					//--------------------------------------------------------------------------------
				}
				//--------------------------------------------------------------------------------
			}
		}
		//-----------------------------------------------------------------------------------------------------------------------------------------------------
		break;
	}
	//--------------------------------------------------------------------------------
	DataRecv(protoNum,aRecv,aLen,aIndex,Encrypt,Serial);
	//--------------------------------------------------------------------------------
	return true;
	//--------------------------------------------------------------------------------
}